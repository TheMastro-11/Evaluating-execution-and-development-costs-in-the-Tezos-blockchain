archetype crowdfunding

//state machine
states = 
| funding initial 
| airdrop
| refund

//declare variables and constants
constant startDate : date = now
constant endDate : date = now + 5s
variable contributors : map<address, list<tez>> = []
constant minAmount : tez = 10utz
constant maxAmount : tez = 1000utz
constant ceiling : tez = 100000utz
constant floorPrice : tez = 200utz
variable isSuccess : bool = false


//transitions
transition airdrop_ () {
    from funding 
        to airdrop
    with effect{isSuccess := true}
}


transition refund_ () {
    from funding
        to refund   
}


//entrypoints
entry contribute () {
    if state = funding then begin
        //check if amount is between min and max
        if transferred < minAmount or transferred > maxAmount then
            fail("Amount incorrect");

        //add donator on map
        var tmp : list<tez> =  [0utz]; //local variable 
        if contributors.contains(caller) then begin
            //check if it will reach the max amount with other donation
            tmp ?:= contributors[caller] : "Error";
            if checkTotal(tmp) + transferred > maxAmount then
                fail("Reached max Amount");
            
            tmp.prepend(transferred); //add new donation with the other
            contributors.put(caller, tmp) //update value
        end
        else
            contributors.put(caller, [transferred]) //add new donator
        end
    else
        fail("At this state you can't call this entry");
    
    //check if ceiling is reached
    if balance + transferred >= ceiling then
        //call transition
        transfer 0tz to entry self.airdrop_()
    
}

function checkTotal(lst : list<tez>) : tez {
    var total : tez = 0utz;
    
    //sum all the elements of list
    for e in lst do
        total += e
    done;

    return total
}

entry checkTime(){
    //check if time is over
    if now > endDate then
        if balance > floorPrice then begin
            isSuccess := true;
            transfer 0tz to entry self.airdrop_() //state change to airdrop
            end
        else 
            for (x,y) in contributors do
                transfer checkTotal(y) to x //start refund 
            done;
            transfer 0tz to entry self.refund_() //otherwise change to refund
}


entry dropToken(addr : address){
    var mapDon : map<address, tez> = [];
    if state = airdrop then begin
        //airdrop newToken
        for (x,y) in contributors do
            mapDon.put(x, checkTotal(y))
        done;
        //transfer balance to addr call airdrop<
        transfer balance to addr call airdrop<map<address, tez>>(mapDon)
        end
    else
        fail("At this state you can't call this entry")
}
