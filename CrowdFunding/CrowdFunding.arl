archetype crowdfunding

//state machine
states = 
| funding initial 
| timeOver
| airdrop
| refund

//declare variable, constant and asset
constant startDate : date = now
constant endDate : date = now + 1d
variable contributors : map<address, list<tez>> = []
constant minAmount : tez = 10utz
constant maxAmount : tez = 1000utz
constant ceiling : tez = 100000utz
constant floorPrice : tez = 200utz
variable isSuccess : bool = false


//transitions
transition airdrop_1 () {
    from funding 
        to airdrop
    with effect{isSuccess := true}
}

transition time_Over () {
    from funding 
        to timeOver
    when {now > endDate}
}

transition airdrop_2 () {
    from timeOver 
        to airdrop
    when {balance >= floorPrice}
    with effect {isSuccess := true}
}

transition refund_ () {
    from timeOver
        to refund
    when {balance < floorPrice}
}

//entrypoints
entry contribute () {
    //check if ceiling is reached
    if balance + transferred >= ceiling then
        //call transition
        transfer 0tz to entry self.airdrop_1()
    else
    
    //check if amount is between min and max
    if transferred < minAmount or transferred > maxAmount then
        fail("Amount incorrect");

    //add donator on map
    var tmp : list<tez> ?= contributors[caller]; //local variable 
    if contributors.contains(caller) then begin
        tmp.prepend(transferred);
        contributors.put(caller, tmp)
    end
    else
        contributors.put(caller, [transferred]) 
    
}